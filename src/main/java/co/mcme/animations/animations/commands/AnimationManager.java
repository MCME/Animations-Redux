/*  This file is part of MCMEAnimations.
 * 
 *  MCMEAnimations is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  MCMEAnimations is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with MCMEAnimations.  If not, see <http://www.gnu.org/licenses/>.
 */
package co.mcme.animations.animations.commands;

import co.mcme.animations.MCMEAnimations;
import co.mcme.animations.animations.MCMEAnimation;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

/**
 *
 * @author Luca
 */
public class AnimationManager implements CommandExecutor {

    public String exportTemplate
            = "<html class=\"wf-droidsans-n4-active wf-active\">"
            + "<head>"
            + "<link href=\"animations.css\" rel=\"stylesheet\" type=\"text/css\">"
            + "<link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Droid+Sans\">"
            + "<script>"
            + "WebFont.load({"
            + "google: {"
            + "families: ['Droid Sans']"
            + "}"
            + "});"
            + "</script>"
            + "<title>Minecraft Middle-Earth</title>"
            + "<script>"
            + "WebFont.load({"
            + "google: {"
            + "families: ['Droid Sans']"
            + "}"
            + "});"
            + "</script>"
            + "</head>"
            + "<body class=\"darkgrey\">"
            + "<br/>"
            + "<div class=\"content lightgrey\">"
            + "This file lists all the available animations on the MCME servers. The file is automatically generated by the animations plugin."
            + "<br/>"
            + "The main site for MCME can be found <a href=\"http://mcmiddleearth.com\">here</a>!"
            + "</div>"
            + "<div class=\"content lightgrey\">"
            + "<h3>MCMEAnimations currently available:</h3>"
            + "</div>"
            + "%1$s"
            + "<div style=\"display:none;\">    mcme.co    </div>"
            + "</body>"
            + "</html>";

    public boolean onCommand(CommandSender cs, Command cmnd, String string, String[] strings) {
        if (cs instanceof Player) {
            Player p = (Player) cs;

            if (strings[0].equals("debug")) {
                executeDebugCommand(p, strings);
                return true;
            }

            if (strings[0].equals("soundlist")) {
                listAvailableSounds(p);
                return true;
            }

            if (strings.length == 1) {
                if (strings[0].equals("list")) {
                    listAnimations(p);
                    return true;
                } else if (strings[0].equals("export")) {
                    exportAnimationsInfo(p);
                    return true;
                }
            } else if (strings.length == 2) {
                if (strings[0].equals("delete")) {
                    deleteAnimation(p, strings[1]);
                    return true;
                }
            }

            showHelp(p);
            return true;
        }
        return false;
    }

    private void showHelp(Player p) {
        p.sendMessage(ChatColor.BLUE + "" + ChatColor.BOLD + "MCME Animations manager");
        p.sendMessage(ChatColor.AQUA + "Available commands:");
        p.sendMessage(ChatColor.AQUA + "" + ChatColor.BOLD + "list" + ChatColor.RESET + " - lists all the loaded animations");
        p.sendMessage(ChatColor.AQUA + "" + ChatColor.BOLD + "delete <animation-name>" + ChatColor.RESET + " - delete the given animation");
        p.sendMessage(ChatColor.AQUA + "" + ChatColor.BOLD + "export" + ChatColor.RESET + " - Creates a file listing all the animations inside the plugin folder");
    }

    private void listAnimations(Player p) {
        p.sendMessage(ChatColor.BLUE + "-------=====================-------");
        p.sendMessage(ChatColor.BLUE + "       Currently loaded Animations");
        p.sendMessage(ChatColor.BLUE + "-------=====================-------");
        for (MCMEAnimation a : MCMEAnimations.animations) {
            p.sendMessage(a.getName() + " " + a.getConfiguration().get("description") + " created by " + a.getConfiguration().get("creator"));
        }
        p.sendMessage(ChatColor.BLUE + "-------=====================-------");
    }

    private void deleteAnimation(Player p, String animationName, AnimationFactory factory) {
        for (MCMEAnimation a : MCMEAnimations.animations) {
            if (a.getName().equals(animationName)) {
                try {
                    MCMEAnimations.animations.remove(a);
                    factory.delete(a.getAnimationRoot());
                    MCMEAnimations.MCMEAnimationsInstance.loadAnimations();
                    p.sendMessage(ChatColor.BLUE + a.getName() + " successfully deleted from the server.");
                } catch (IOException ex) {
                    Logger.getLogger(AnimationManager.class.getName()).log(Level.SEVERE, null, ex);
                }
                return;
            }
        }
        p.sendMessage(ChatColor.RED + "Could not find animation \"" + animationName + "\"");
    }

    private void listAvailableSounds(Player p) {
        p.sendMessage(ChatColor.BLUE + "" + ChatColor.BOLD + "---------------------------");
        p.sendMessage(ChatColor.BLUE + "" + ChatColor.BOLD + "Available Sound constants:");
        p.sendMessage(ChatColor.BLUE + "" + ChatColor.BOLD + "---------------------------");
        String sounds = "";
        for (Sound s : Sound.values()) {
            sounds += ", " + s.toString();
        }
        sounds.replaceFirst(", ", "");
        p.sendMessage(ChatColor.AQUA + sounds);
    }

    private void executeDebugCommand(Player p, String[] strings) {
        try {
            Sound s = Sound.valueOf(strings[1]);
            if (s != null) {
                p.playSound(p.getLocation(), s, Float.valueOf(strings[2]), Float.valueOf(strings[3]));
                p.sendMessage(ChatColor.YELLOW + "" + ChatColor.BOLD + "Sound played");
            }
        } catch (NumberFormatException ex) {
            p.sendMessage(ChatColor.RED + "" + ChatColor.BOLD + "Invalid float value!");
        }
    }

    private void exportAnimationsInfo(Player p) {
        String ExportString = "";
        for (MCMEAnimation a : MCMEAnimations.animations) {
            ExportString += a.toHtml();
        }

        MCMEAnimations.MCMEAnimationsInstance.getLogger().info("1st step");
        String fullFile = String.format(exportTemplate, ExportString);
        MCMEAnimations.MCMEAnimationsInstance.getLogger().info("file generated");

        try {
            FileWriter fw = new FileWriter(MCMEAnimations.MCMEAnimationsInstance.getDataFolder() + File.separator + "animations.htm");
            MCMEAnimations.MCMEAnimationsInstance.getLogger().info("file writer created");
            fw.write(fullFile);
            MCMEAnimations.MCMEAnimationsInstance.getLogger().info("file writer written");
            fw.close();
            p.sendMessage(ChatColor.BLUE + "HTML file created.");
        } catch (IOException ex) {
            p.sendMessage(ChatColor.RED + "Error saving file!");
            Logger.getLogger(AnimationManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
